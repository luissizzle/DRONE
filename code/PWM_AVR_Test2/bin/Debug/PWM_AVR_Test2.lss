
bin\Debug\PWM_AVR_Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000007ea  0000089e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000089e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000089e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000038  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000872  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000071f  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000200  00000000  00000000  000018dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c4  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000372  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003de  00000000  00000000  00002016  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
void setupADC();

void startConversion();

int main(void)
{
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	2e 97       	sbiw	r28, 0x0e	; 14
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
    DDRD = (1 << PORTD6);
  a8:	8a e2       	ldi	r24, 0x2A	; 42
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	20 e4       	ldi	r18, 0x40	; 64
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
	DDRB = (1 << PORTB1);
  b2:	84 e2       	ldi	r24, 0x24	; 36
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	22 e0       	ldi	r18, 0x02	; 2
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18

    TCCR0A = (1 << COM0A1) | (1 << WGM00) | (1 << WGM01); //what more we are setting up and what we are going to do in that setup
  bc:	84 e4       	ldi	r24, 0x44	; 68
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	23 e8       	ldi	r18, 0x83	; 131
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	TCCR1A = (1 << COM1A1) | (1 << WGM12) | (1 << WGM10);
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	29 e8       	ldi	r18, 0x89	; 137
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18

    TIMSK0 = (1 << TOIE0);
  d0:	8e e6       	ldi	r24, 0x6E	; 110
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
	TIMSK1 = (1 << TOIE1);
  da:	8f e6       	ldi	r24, 0x6F	; 111
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18

    //OCR0A = (dutyCycle/100)*255.0;
    OCR1A = (dutyCycle2/100)*255.0;
  e4:	08 e8       	ldi	r16, 0x88	; 136
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dutyCycle2>
  ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dutyCycle2+0x1>
  f0:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <dutyCycle2+0x2>
  f4:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <dutyCycle2+0x3>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	48 ec       	ldi	r20, 0xC8	; 200
  fe:	52 e4       	ldi	r21, 0x42	; 66
 100:	bc 01       	movw	r22, r24
 102:	cd 01       	movw	r24, r26
 104:	0e 94 2e 02 	call	0x45c	; 0x45c <__divsf3>
 108:	dc 01       	movw	r26, r24
 10a:	cb 01       	movw	r24, r22
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	4f e7       	ldi	r20, 0x7F	; 127
 112:	53 e4       	ldi	r21, 0x43	; 67
 114:	bc 01       	movw	r22, r24
 116:	cd 01       	movw	r24, r26
 118:	0e 94 86 03 	call	0x70c	; 0x70c <__mulsf3>
 11c:	dc 01       	movw	r26, r24
 11e:	cb 01       	movw	r24, r22
 120:	bc 01       	movw	r22, r24
 122:	cd 01       	movw	r24, r26
 124:	0e 94 a0 02 	call	0x540	; 0x540 <__fixunssfsi>
 128:	dc 01       	movw	r26, r24
 12a:	cb 01       	movw	r24, r22
 12c:	f8 01       	movw	r30, r16
 12e:	91 83       	std	Z+1, r25	; 0x01
 130:	80 83       	st	Z, r24

	setupADC();
 132:	0e 94 36 01 	call	0x26c	; 0x26c <setupADC>

    sei();
 136:	78 94       	sei

    TCCR0B = (1 << CS00) | (1 << CS02);
 138:	85 e4       	ldi	r24, 0x45	; 69
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	25 e0       	ldi	r18, 0x05	; 5
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
	TCCR1B = (1 << CS12) | (1 << CS10);
 142:	81 e8       	ldi	r24, 0x81	; 129
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	25 e0       	ldi	r18, 0x05	; 5
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	a8 ec       	ldi	r26, 0xC8	; 200
 152:	b2 e4       	ldi	r27, 0x42	; 66
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	9a 83       	std	Y+2, r25	; 0x02
 158:	ab 83       	std	Y+3, r26	; 0x03
 15a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e4       	ldi	r19, 0x40	; 64
 160:	4c e9       	ldi	r20, 0x9C	; 156
 162:	55 e4       	ldi	r21, 0x45	; 69
 164:	69 81       	ldd	r22, Y+1	; 0x01
 166:	7a 81       	ldd	r23, Y+2	; 0x02
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	9c 81       	ldd	r25, Y+4	; 0x04
 16c:	0e 94 86 03 	call	0x70c	; 0x70c <__mulsf3>
 170:	dc 01       	movw	r26, r24
 172:	cb 01       	movw	r24, r22
 174:	8d 83       	std	Y+5, r24	; 0x05
 176:	9e 83       	std	Y+6, r25	; 0x06
 178:	af 83       	std	Y+7, r26	; 0x07
 17a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	40 e8       	ldi	r20, 0x80	; 128
 182:	5f e3       	ldi	r21, 0x3F	; 63
 184:	6d 81       	ldd	r22, Y+5	; 0x05
 186:	7e 81       	ldd	r23, Y+6	; 0x06
 188:	8f 81       	ldd	r24, Y+7	; 0x07
 18a:	98 85       	ldd	r25, Y+8	; 0x08
 18c:	0e 94 29 02 	call	0x452	; 0x452 <__cmpsf2>
 190:	88 23       	and	r24, r24
 192:	2c f4       	brge	.+10     	; 0x19e <main+0x10e>
		__ticks = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	9a 87       	std	Y+10, r25	; 0x0a
 19a:	89 87       	std	Y+9, r24	; 0x09
 19c:	3f c0       	rjmp	.+126    	; 0x21c <main+0x18c>
	else if (__tmp > 65535)
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	3f ef       	ldi	r19, 0xFF	; 255
 1a2:	4f e7       	ldi	r20, 0x7F	; 127
 1a4:	57 e4       	ldi	r21, 0x47	; 71
 1a6:	6d 81       	ldd	r22, Y+5	; 0x05
 1a8:	7e 81       	ldd	r23, Y+6	; 0x06
 1aa:	8f 81       	ldd	r24, Y+7	; 0x07
 1ac:	98 85       	ldd	r25, Y+8	; 0x08
 1ae:	0e 94 81 03 	call	0x702	; 0x702 <__gesf2>
 1b2:	18 16       	cp	r1, r24
 1b4:	4c f5       	brge	.+82     	; 0x208 <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e2       	ldi	r20, 0x20	; 32
 1bc:	51 e4       	ldi	r21, 0x41	; 65
 1be:	69 81       	ldd	r22, Y+1	; 0x01
 1c0:	7a 81       	ldd	r23, Y+2	; 0x02
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	9c 81       	ldd	r25, Y+4	; 0x04
 1c6:	0e 94 86 03 	call	0x70c	; 0x70c <__mulsf3>
 1ca:	dc 01       	movw	r26, r24
 1cc:	cb 01       	movw	r24, r22
 1ce:	bc 01       	movw	r22, r24
 1d0:	cd 01       	movw	r24, r26
 1d2:	0e 94 a0 02 	call	0x540	; 0x540 <__fixunssfsi>
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	9a 87       	std	Y+10, r25	; 0x0a
 1dc:	89 87       	std	Y+9, r24	; 0x09
 1de:	0f c0       	rjmp	.+30     	; 0x1fe <main+0x16e>
 1e0:	84 ef       	ldi	r24, 0xF4	; 244
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	9c 87       	std	Y+12, r25	; 0x0c
 1e6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ea:	9c 85       	ldd	r25, Y+12	; 0x0c
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x15c>
 1f0:	9c 87       	std	Y+12, r25	; 0x0c
 1f2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f4:	89 85       	ldd	r24, Y+9	; 0x09
 1f6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	9a 87       	std	Y+10, r25	; 0x0a
 1fc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	89 85       	ldd	r24, Y+9	; 0x09
 200:	9a 85       	ldd	r25, Y+10	; 0x0a
 202:	89 2b       	or	r24, r25
 204:	69 f7       	brne	.-38     	; 0x1e0 <main+0x150>
 206:	14 c0       	rjmp	.+40     	; 0x230 <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 208:	6d 81       	ldd	r22, Y+5	; 0x05
 20a:	7e 81       	ldd	r23, Y+6	; 0x06
 20c:	8f 81       	ldd	r24, Y+7	; 0x07
 20e:	98 85       	ldd	r25, Y+8	; 0x08
 210:	0e 94 a0 02 	call	0x540	; 0x540 <__fixunssfsi>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	9a 87       	std	Y+10, r25	; 0x0a
 21a:	89 87       	std	Y+9, r24	; 0x09
 21c:	89 85       	ldd	r24, Y+9	; 0x09
 21e:	9a 85       	ldd	r25, Y+10	; 0x0a
 220:	9e 87       	std	Y+14, r25	; 0x0e
 222:	8d 87       	std	Y+13, r24	; 0x0d
 224:	8d 85       	ldd	r24, Y+13	; 0x0d
 226:	9e 85       	ldd	r25, Y+14	; 0x0e
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x198>
 22c:	9e 87       	std	Y+14, r25	; 0x0e
 22e:	8d 87       	std	Y+13, r24	; 0x0d
        //TODO:: Please write your application code
        _delay_ms(100);

        //dutyCycle1 = 50;

        dutyCycle2 = 50;
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	a8 e4       	ldi	r26, 0x48	; 72
 236:	b2 e4       	ldi	r27, 0x42	; 66
 238:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyCycle2>
 23c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <dutyCycle2+0x1>
 240:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <dutyCycle2+0x2>
 244:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <dutyCycle2+0x3>
    }
 248:	81 cf       	rjmp	.-254    	; 0x14c <main+0xbc>

0000024a <startConversion>:
}

void startConversion()
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADSC);
 252:	8a e7       	ldi	r24, 0x7A	; 122
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	2a e7       	ldi	r18, 0x7A	; 122
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	f9 01       	movw	r30, r18
 25c:	20 81       	ld	r18, Z
 25e:	20 64       	ori	r18, 0x40	; 64
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
}
 264:	00 00       	nop
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <setupADC>:

void setupADC()
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2);
 274:	8c e7       	ldi	r24, 0x7C	; 124
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	25 e4       	ldi	r18, 0x45	; 69
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 27e:	8a e7       	ldi	r24, 0x7A	; 122
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	2f e8       	ldi	r18, 0x8F	; 143
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC5D);
 288:	8e e7       	ldi	r24, 0x7E	; 126
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	20 e2       	ldi	r18, 0x20	; 32
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18

	startConversion();
 292:	0e 94 25 01 	call	0x24a	; 0x24a <startConversion>
}
 296:	00 00       	nop
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
    OCR0A = dutyCycle1;
 2ce:	07 e4       	ldi	r16, 0x47	; 71
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2da:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 2de:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 2e2:	bc 01       	movw	r22, r24
 2e4:	cd 01       	movw	r24, r26
 2e6:	0e 94 a0 02 	call	0x540	; 0x540 <__fixunssfsi>
 2ea:	dc 01       	movw	r26, r24
 2ec:	cb 01       	movw	r24, r22
 2ee:	f8 01       	movw	r30, r16
 2f0:	80 83       	st	Z, r24
}
 2f2:	00 00       	nop
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	0f 90       	pop	r0
 316:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
	OCR1A = (dutyCycle2/100)*255.0;
 350:	08 e8       	ldi	r16, 0x88	; 136
 352:	10 e0       	ldi	r17, 0x00	; 0
 354:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dutyCycle2>
 358:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dutyCycle2+0x1>
 35c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <dutyCycle2+0x2>
 360:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <dutyCycle2+0x3>
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	48 ec       	ldi	r20, 0xC8	; 200
 36a:	52 e4       	ldi	r21, 0x42	; 66
 36c:	bc 01       	movw	r22, r24
 36e:	cd 01       	movw	r24, r26
 370:	0e 94 2e 02 	call	0x45c	; 0x45c <__divsf3>
 374:	dc 01       	movw	r26, r24
 376:	cb 01       	movw	r24, r22
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	4f e7       	ldi	r20, 0x7F	; 127
 37e:	53 e4       	ldi	r21, 0x43	; 67
 380:	bc 01       	movw	r22, r24
 382:	cd 01       	movw	r24, r26
 384:	0e 94 86 03 	call	0x70c	; 0x70c <__mulsf3>
 388:	dc 01       	movw	r26, r24
 38a:	cb 01       	movw	r24, r22
 38c:	bc 01       	movw	r22, r24
 38e:	cd 01       	movw	r24, r26
 390:	0e 94 a0 02 	call	0x540	; 0x540 <__fixunssfsi>
 394:	dc 01       	movw	r26, r24
 396:	cb 01       	movw	r24, r22
 398:	f8 01       	movw	r30, r16
 39a:	91 83       	std	Z+1, r25	; 0x01
 39c:	80 83       	st	Z, r24
}
 39e:	00 00       	nop
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	0f 90       	pop	r0
 3c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <__vector_21>:

ISR(ADC_vect)
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
	dutyCycle1 = ADC;
 3f8:	88 e7       	ldi	r24, 0x78	; 120
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	fc 01       	movw	r30, r24
 3fe:	80 81       	ld	r24, Z
 400:	91 81       	ldd	r25, Z+1	; 0x01
 402:	cc 01       	movw	r24, r24
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	bc 01       	movw	r22, r24
 40a:	cd 01       	movw	r24, r26
 40c:	0e 94 cf 02 	call	0x59e	; 0x59e <__floatunsisf>
 410:	dc 01       	movw	r26, r24
 412:	cb 01       	movw	r24, r22
 414:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 418:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 41c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 420:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
	startConversion();
 424:	0e 94 25 01 	call	0x24a	; 0x24a <startConversion>
}
 428:	00 00       	nop
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <__cmpsf2>:
 452:	0e 94 0c 03 	call	0x618	; 0x618 <__fp_cmp>
 456:	08 f4       	brcc	.+2      	; 0x45a <__cmpsf2+0x8>
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret

0000045c <__divsf3>:
 45c:	0e 94 42 02 	call	0x484	; 0x484 <__divsf3x>
 460:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_round>
 464:	0e 94 40 03 	call	0x680	; 0x680 <__fp_pscB>
 468:	58 f0       	brcs	.+22     	; 0x480 <__divsf3+0x24>
 46a:	0e 94 39 03 	call	0x672	; 0x672 <__fp_pscA>
 46e:	40 f0       	brcs	.+16     	; 0x480 <__divsf3+0x24>
 470:	29 f4       	brne	.+10     	; 0x47c <__divsf3+0x20>
 472:	5f 3f       	cpi	r21, 0xFF	; 255
 474:	29 f0       	breq	.+10     	; 0x480 <__divsf3+0x24>
 476:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_inf>
 47a:	51 11       	cpse	r21, r1
 47c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_szero>
 480:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_nan>

00000484 <__divsf3x>:
 484:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_split3>
 488:	68 f3       	brcs	.-38     	; 0x464 <__divsf3+0x8>

0000048a <__divsf3_pse>:
 48a:	99 23       	and	r25, r25
 48c:	b1 f3       	breq	.-20     	; 0x47a <__divsf3+0x1e>
 48e:	55 23       	and	r21, r21
 490:	91 f3       	breq	.-28     	; 0x476 <__divsf3+0x1a>
 492:	95 1b       	sub	r25, r21
 494:	55 0b       	sbc	r21, r21
 496:	bb 27       	eor	r27, r27
 498:	aa 27       	eor	r26, r26
 49a:	62 17       	cp	r22, r18
 49c:	73 07       	cpc	r23, r19
 49e:	84 07       	cpc	r24, r20
 4a0:	38 f0       	brcs	.+14     	; 0x4b0 <__divsf3_pse+0x26>
 4a2:	9f 5f       	subi	r25, 0xFF	; 255
 4a4:	5f 4f       	sbci	r21, 0xFF	; 255
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	44 1f       	adc	r20, r20
 4ac:	aa 1f       	adc	r26, r26
 4ae:	a9 f3       	breq	.-22     	; 0x49a <__divsf3_pse+0x10>
 4b0:	35 d0       	rcall	.+106    	; 0x51c <__divsf3_pse+0x92>
 4b2:	0e 2e       	mov	r0, r30
 4b4:	3a f0       	brmi	.+14     	; 0x4c4 <__divsf3_pse+0x3a>
 4b6:	e0 e8       	ldi	r30, 0x80	; 128
 4b8:	32 d0       	rcall	.+100    	; 0x51e <__divsf3_pse+0x94>
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	50 40       	sbci	r21, 0x00	; 0
 4be:	e6 95       	lsr	r30
 4c0:	00 1c       	adc	r0, r0
 4c2:	ca f7       	brpl	.-14     	; 0x4b6 <__divsf3_pse+0x2c>
 4c4:	2b d0       	rcall	.+86     	; 0x51c <__divsf3_pse+0x92>
 4c6:	fe 2f       	mov	r31, r30
 4c8:	29 d0       	rcall	.+82     	; 0x51c <__divsf3_pse+0x92>
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	88 1f       	adc	r24, r24
 4d0:	bb 1f       	adc	r27, r27
 4d2:	26 17       	cp	r18, r22
 4d4:	37 07       	cpc	r19, r23
 4d6:	48 07       	cpc	r20, r24
 4d8:	ab 07       	cpc	r26, r27
 4da:	b0 e8       	ldi	r27, 0x80	; 128
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <__divsf3_pse+0x56>
 4de:	bb 0b       	sbc	r27, r27
 4e0:	80 2d       	mov	r24, r0
 4e2:	bf 01       	movw	r22, r30
 4e4:	ff 27       	eor	r31, r31
 4e6:	93 58       	subi	r25, 0x83	; 131
 4e8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ea:	3a f0       	brmi	.+14     	; 0x4fa <__divsf3_pse+0x70>
 4ec:	9e 3f       	cpi	r25, 0xFE	; 254
 4ee:	51 05       	cpc	r21, r1
 4f0:	78 f0       	brcs	.+30     	; 0x510 <__divsf3_pse+0x86>
 4f2:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_inf>
 4f6:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_szero>
 4fa:	5f 3f       	cpi	r21, 0xFF	; 255
 4fc:	e4 f3       	brlt	.-8      	; 0x4f6 <__divsf3_pse+0x6c>
 4fe:	98 3e       	cpi	r25, 0xE8	; 232
 500:	d4 f3       	brlt	.-12     	; 0x4f6 <__divsf3_pse+0x6c>
 502:	86 95       	lsr	r24
 504:	77 95       	ror	r23
 506:	67 95       	ror	r22
 508:	b7 95       	ror	r27
 50a:	f7 95       	ror	r31
 50c:	9f 5f       	subi	r25, 0xFF	; 255
 50e:	c9 f7       	brne	.-14     	; 0x502 <__divsf3_pse+0x78>
 510:	88 0f       	add	r24, r24
 512:	91 1d       	adc	r25, r1
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret
 51c:	e1 e0       	ldi	r30, 0x01	; 1
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	bb 1f       	adc	r27, r27
 526:	62 17       	cp	r22, r18
 528:	73 07       	cpc	r23, r19
 52a:	84 07       	cpc	r24, r20
 52c:	ba 07       	cpc	r27, r26
 52e:	20 f0       	brcs	.+8      	; 0x538 <__divsf3_pse+0xae>
 530:	62 1b       	sub	r22, r18
 532:	73 0b       	sbc	r23, r19
 534:	84 0b       	sbc	r24, r20
 536:	ba 0b       	sbc	r27, r26
 538:	ee 1f       	adc	r30, r30
 53a:	88 f7       	brcc	.-30     	; 0x51e <__divsf3_pse+0x94>
 53c:	e0 95       	com	r30
 53e:	08 95       	ret

00000540 <__fixunssfsi>:
 540:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_splitA>
 544:	88 f0       	brcs	.+34     	; 0x568 <__fixunssfsi+0x28>
 546:	9f 57       	subi	r25, 0x7F	; 127
 548:	98 f0       	brcs	.+38     	; 0x570 <__fixunssfsi+0x30>
 54a:	b9 2f       	mov	r27, r25
 54c:	99 27       	eor	r25, r25
 54e:	b7 51       	subi	r27, 0x17	; 23
 550:	b0 f0       	brcs	.+44     	; 0x57e <__fixunssfsi+0x3e>
 552:	e1 f0       	breq	.+56     	; 0x58c <__fixunssfsi+0x4c>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	1a f0       	brmi	.+6      	; 0x564 <__fixunssfsi+0x24>
 55e:	ba 95       	dec	r27
 560:	c9 f7       	brne	.-14     	; 0x554 <__fixunssfsi+0x14>
 562:	14 c0       	rjmp	.+40     	; 0x58c <__fixunssfsi+0x4c>
 564:	b1 30       	cpi	r27, 0x01	; 1
 566:	91 f0       	breq	.+36     	; 0x58c <__fixunssfsi+0x4c>
 568:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_zero>
 56c:	b1 e0       	ldi	r27, 0x01	; 1
 56e:	08 95       	ret
 570:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_zero>
 574:	67 2f       	mov	r22, r23
 576:	78 2f       	mov	r23, r24
 578:	88 27       	eor	r24, r24
 57a:	b8 5f       	subi	r27, 0xF8	; 248
 57c:	39 f0       	breq	.+14     	; 0x58c <__fixunssfsi+0x4c>
 57e:	b9 3f       	cpi	r27, 0xF9	; 249
 580:	cc f3       	brlt	.-14     	; 0x574 <__fixunssfsi+0x34>
 582:	86 95       	lsr	r24
 584:	77 95       	ror	r23
 586:	67 95       	ror	r22
 588:	b3 95       	inc	r27
 58a:	d9 f7       	brne	.-10     	; 0x582 <__fixunssfsi+0x42>
 58c:	3e f4       	brtc	.+14     	; 0x59c <__fixunssfsi+0x5c>
 58e:	90 95       	com	r25
 590:	80 95       	com	r24
 592:	70 95       	com	r23
 594:	61 95       	neg	r22
 596:	7f 4f       	sbci	r23, 0xFF	; 255
 598:	8f 4f       	sbci	r24, 0xFF	; 255
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	08 95       	ret

0000059e <__floatunsisf>:
 59e:	e8 94       	clt
 5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <__floatsisf+0x12>

000005a2 <__floatsisf>:
 5a2:	97 fb       	bst	r25, 7
 5a4:	3e f4       	brtc	.+14     	; 0x5b4 <__floatsisf+0x12>
 5a6:	90 95       	com	r25
 5a8:	80 95       	com	r24
 5aa:	70 95       	com	r23
 5ac:	61 95       	neg	r22
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	8f 4f       	sbci	r24, 0xFF	; 255
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	99 23       	and	r25, r25
 5b6:	a9 f0       	breq	.+42     	; 0x5e2 <__floatsisf+0x40>
 5b8:	f9 2f       	mov	r31, r25
 5ba:	96 e9       	ldi	r25, 0x96	; 150
 5bc:	bb 27       	eor	r27, r27
 5be:	93 95       	inc	r25
 5c0:	f6 95       	lsr	r31
 5c2:	87 95       	ror	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b7 95       	ror	r27
 5ca:	f1 11       	cpse	r31, r1
 5cc:	f8 cf       	rjmp	.-16     	; 0x5be <__floatsisf+0x1c>
 5ce:	fa f4       	brpl	.+62     	; 0x60e <__floatsisf+0x6c>
 5d0:	bb 0f       	add	r27, r27
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <__floatsisf+0x36>
 5d4:	60 ff       	sbrs	r22, 0
 5d6:	1b c0       	rjmp	.+54     	; 0x60e <__floatsisf+0x6c>
 5d8:	6f 5f       	subi	r22, 0xFF	; 255
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	16 c0       	rjmp	.+44     	; 0x60e <__floatsisf+0x6c>
 5e2:	88 23       	and	r24, r24
 5e4:	11 f0       	breq	.+4      	; 0x5ea <__floatsisf+0x48>
 5e6:	96 e9       	ldi	r25, 0x96	; 150
 5e8:	11 c0       	rjmp	.+34     	; 0x60c <__floatsisf+0x6a>
 5ea:	77 23       	and	r23, r23
 5ec:	21 f0       	breq	.+8      	; 0x5f6 <__floatsisf+0x54>
 5ee:	9e e8       	ldi	r25, 0x8E	; 142
 5f0:	87 2f       	mov	r24, r23
 5f2:	76 2f       	mov	r23, r22
 5f4:	05 c0       	rjmp	.+10     	; 0x600 <__floatsisf+0x5e>
 5f6:	66 23       	and	r22, r22
 5f8:	71 f0       	breq	.+28     	; 0x616 <__floatsisf+0x74>
 5fa:	96 e8       	ldi	r25, 0x86	; 134
 5fc:	86 2f       	mov	r24, r22
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	2a f0       	brmi	.+10     	; 0x60e <__floatsisf+0x6c>
 604:	9a 95       	dec	r25
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	da f7       	brpl	.-10     	; 0x604 <__floatsisf+0x62>
 60e:	88 0f       	add	r24, r24
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	97 f9       	bld	r25, 7
 616:	08 95       	ret

00000618 <__fp_cmp>:
 618:	99 0f       	add	r25, r25
 61a:	00 08       	sbc	r0, r0
 61c:	55 0f       	add	r21, r21
 61e:	aa 0b       	sbc	r26, r26
 620:	e0 e8       	ldi	r30, 0x80	; 128
 622:	fe ef       	ldi	r31, 0xFE	; 254
 624:	16 16       	cp	r1, r22
 626:	17 06       	cpc	r1, r23
 628:	e8 07       	cpc	r30, r24
 62a:	f9 07       	cpc	r31, r25
 62c:	c0 f0       	brcs	.+48     	; 0x65e <__fp_cmp+0x46>
 62e:	12 16       	cp	r1, r18
 630:	13 06       	cpc	r1, r19
 632:	e4 07       	cpc	r30, r20
 634:	f5 07       	cpc	r31, r21
 636:	98 f0       	brcs	.+38     	; 0x65e <__fp_cmp+0x46>
 638:	62 1b       	sub	r22, r18
 63a:	73 0b       	sbc	r23, r19
 63c:	84 0b       	sbc	r24, r20
 63e:	95 0b       	sbc	r25, r21
 640:	39 f4       	brne	.+14     	; 0x650 <__fp_cmp+0x38>
 642:	0a 26       	eor	r0, r26
 644:	61 f0       	breq	.+24     	; 0x65e <__fp_cmp+0x46>
 646:	23 2b       	or	r18, r19
 648:	24 2b       	or	r18, r20
 64a:	25 2b       	or	r18, r21
 64c:	21 f4       	brne	.+8      	; 0x656 <__fp_cmp+0x3e>
 64e:	08 95       	ret
 650:	0a 26       	eor	r0, r26
 652:	09 f4       	brne	.+2      	; 0x656 <__fp_cmp+0x3e>
 654:	a1 40       	sbci	r26, 0x01	; 1
 656:	a6 95       	lsr	r26
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	81 1d       	adc	r24, r1
 65c:	81 1d       	adc	r24, r1
 65e:	08 95       	ret

00000660 <__fp_inf>:
 660:	97 f9       	bld	r25, 7
 662:	9f 67       	ori	r25, 0x7F	; 127
 664:	80 e8       	ldi	r24, 0x80	; 128
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	08 95       	ret

0000066c <__fp_nan>:
 66c:	9f ef       	ldi	r25, 0xFF	; 255
 66e:	80 ec       	ldi	r24, 0xC0	; 192
 670:	08 95       	ret

00000672 <__fp_pscA>:
 672:	00 24       	eor	r0, r0
 674:	0a 94       	dec	r0
 676:	16 16       	cp	r1, r22
 678:	17 06       	cpc	r1, r23
 67a:	18 06       	cpc	r1, r24
 67c:	09 06       	cpc	r0, r25
 67e:	08 95       	ret

00000680 <__fp_pscB>:
 680:	00 24       	eor	r0, r0
 682:	0a 94       	dec	r0
 684:	12 16       	cp	r1, r18
 686:	13 06       	cpc	r1, r19
 688:	14 06       	cpc	r1, r20
 68a:	05 06       	cpc	r0, r21
 68c:	08 95       	ret

0000068e <__fp_round>:
 68e:	09 2e       	mov	r0, r25
 690:	03 94       	inc	r0
 692:	00 0c       	add	r0, r0
 694:	11 f4       	brne	.+4      	; 0x69a <__fp_round+0xc>
 696:	88 23       	and	r24, r24
 698:	52 f0       	brmi	.+20     	; 0x6ae <__fp_round+0x20>
 69a:	bb 0f       	add	r27, r27
 69c:	40 f4       	brcc	.+16     	; 0x6ae <__fp_round+0x20>
 69e:	bf 2b       	or	r27, r31
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <__fp_round+0x18>
 6a2:	60 ff       	sbrs	r22, 0
 6a4:	04 c0       	rjmp	.+8      	; 0x6ae <__fp_round+0x20>
 6a6:	6f 5f       	subi	r22, 0xFF	; 255
 6a8:	7f 4f       	sbci	r23, 0xFF	; 255
 6aa:	8f 4f       	sbci	r24, 0xFF	; 255
 6ac:	9f 4f       	sbci	r25, 0xFF	; 255
 6ae:	08 95       	ret

000006b0 <__fp_split3>:
 6b0:	57 fd       	sbrc	r21, 7
 6b2:	90 58       	subi	r25, 0x80	; 128
 6b4:	44 0f       	add	r20, r20
 6b6:	55 1f       	adc	r21, r21
 6b8:	59 f0       	breq	.+22     	; 0x6d0 <__fp_splitA+0x10>
 6ba:	5f 3f       	cpi	r21, 0xFF	; 255
 6bc:	71 f0       	breq	.+28     	; 0x6da <__fp_splitA+0x1a>
 6be:	47 95       	ror	r20

000006c0 <__fp_splitA>:
 6c0:	88 0f       	add	r24, r24
 6c2:	97 fb       	bst	r25, 7
 6c4:	99 1f       	adc	r25, r25
 6c6:	61 f0       	breq	.+24     	; 0x6e0 <__fp_splitA+0x20>
 6c8:	9f 3f       	cpi	r25, 0xFF	; 255
 6ca:	79 f0       	breq	.+30     	; 0x6ea <__fp_splitA+0x2a>
 6cc:	87 95       	ror	r24
 6ce:	08 95       	ret
 6d0:	12 16       	cp	r1, r18
 6d2:	13 06       	cpc	r1, r19
 6d4:	14 06       	cpc	r1, r20
 6d6:	55 1f       	adc	r21, r21
 6d8:	f2 cf       	rjmp	.-28     	; 0x6be <__fp_split3+0xe>
 6da:	46 95       	lsr	r20
 6dc:	f1 df       	rcall	.-30     	; 0x6c0 <__fp_splitA>
 6de:	08 c0       	rjmp	.+16     	; 0x6f0 <__fp_splitA+0x30>
 6e0:	16 16       	cp	r1, r22
 6e2:	17 06       	cpc	r1, r23
 6e4:	18 06       	cpc	r1, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	f1 cf       	rjmp	.-30     	; 0x6cc <__fp_splitA+0xc>
 6ea:	86 95       	lsr	r24
 6ec:	71 05       	cpc	r23, r1
 6ee:	61 05       	cpc	r22, r1
 6f0:	08 94       	sec
 6f2:	08 95       	ret

000006f4 <__fp_zero>:
 6f4:	e8 94       	clt

000006f6 <__fp_szero>:
 6f6:	bb 27       	eor	r27, r27
 6f8:	66 27       	eor	r22, r22
 6fa:	77 27       	eor	r23, r23
 6fc:	cb 01       	movw	r24, r22
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__gesf2>:
 702:	0e 94 0c 03 	call	0x618	; 0x618 <__fp_cmp>
 706:	08 f4       	brcc	.+2      	; 0x70a <__gesf2+0x8>
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	08 95       	ret

0000070c <__mulsf3>:
 70c:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3x>
 710:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_round>
 714:	0e 94 39 03 	call	0x672	; 0x672 <__fp_pscA>
 718:	38 f0       	brcs	.+14     	; 0x728 <__mulsf3+0x1c>
 71a:	0e 94 40 03 	call	0x680	; 0x680 <__fp_pscB>
 71e:	20 f0       	brcs	.+8      	; 0x728 <__mulsf3+0x1c>
 720:	95 23       	and	r25, r21
 722:	11 f0       	breq	.+4      	; 0x728 <__mulsf3+0x1c>
 724:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_inf>
 728:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_nan>
 72c:	11 24       	eor	r1, r1
 72e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_szero>

00000732 <__mulsf3x>:
 732:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_split3>
 736:	70 f3       	brcs	.-36     	; 0x714 <__mulsf3+0x8>

00000738 <__mulsf3_pse>:
 738:	95 9f       	mul	r25, r21
 73a:	c1 f3       	breq	.-16     	; 0x72c <__mulsf3+0x20>
 73c:	95 0f       	add	r25, r21
 73e:	50 e0       	ldi	r21, 0x00	; 0
 740:	55 1f       	adc	r21, r21
 742:	62 9f       	mul	r22, r18
 744:	f0 01       	movw	r30, r0
 746:	72 9f       	mul	r23, r18
 748:	bb 27       	eor	r27, r27
 74a:	f0 0d       	add	r31, r0
 74c:	b1 1d       	adc	r27, r1
 74e:	63 9f       	mul	r22, r19
 750:	aa 27       	eor	r26, r26
 752:	f0 0d       	add	r31, r0
 754:	b1 1d       	adc	r27, r1
 756:	aa 1f       	adc	r26, r26
 758:	64 9f       	mul	r22, r20
 75a:	66 27       	eor	r22, r22
 75c:	b0 0d       	add	r27, r0
 75e:	a1 1d       	adc	r26, r1
 760:	66 1f       	adc	r22, r22
 762:	82 9f       	mul	r24, r18
 764:	22 27       	eor	r18, r18
 766:	b0 0d       	add	r27, r0
 768:	a1 1d       	adc	r26, r1
 76a:	62 1f       	adc	r22, r18
 76c:	73 9f       	mul	r23, r19
 76e:	b0 0d       	add	r27, r0
 770:	a1 1d       	adc	r26, r1
 772:	62 1f       	adc	r22, r18
 774:	83 9f       	mul	r24, r19
 776:	a0 0d       	add	r26, r0
 778:	61 1d       	adc	r22, r1
 77a:	22 1f       	adc	r18, r18
 77c:	74 9f       	mul	r23, r20
 77e:	33 27       	eor	r19, r19
 780:	a0 0d       	add	r26, r0
 782:	61 1d       	adc	r22, r1
 784:	23 1f       	adc	r18, r19
 786:	84 9f       	mul	r24, r20
 788:	60 0d       	add	r22, r0
 78a:	21 1d       	adc	r18, r1
 78c:	82 2f       	mov	r24, r18
 78e:	76 2f       	mov	r23, r22
 790:	6a 2f       	mov	r22, r26
 792:	11 24       	eor	r1, r1
 794:	9f 57       	subi	r25, 0x7F	; 127
 796:	50 40       	sbci	r21, 0x00	; 0
 798:	9a f0       	brmi	.+38     	; 0x7c0 <__mulsf3_pse+0x88>
 79a:	f1 f0       	breq	.+60     	; 0x7d8 <__mulsf3_pse+0xa0>
 79c:	88 23       	and	r24, r24
 79e:	4a f0       	brmi	.+18     	; 0x7b2 <__mulsf3_pse+0x7a>
 7a0:	ee 0f       	add	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	bb 1f       	adc	r27, r27
 7a6:	66 1f       	adc	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	88 1f       	adc	r24, r24
 7ac:	91 50       	subi	r25, 0x01	; 1
 7ae:	50 40       	sbci	r21, 0x00	; 0
 7b0:	a9 f7       	brne	.-22     	; 0x79c <__mulsf3_pse+0x64>
 7b2:	9e 3f       	cpi	r25, 0xFE	; 254
 7b4:	51 05       	cpc	r21, r1
 7b6:	80 f0       	brcs	.+32     	; 0x7d8 <__mulsf3_pse+0xa0>
 7b8:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_inf>
 7bc:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_szero>
 7c0:	5f 3f       	cpi	r21, 0xFF	; 255
 7c2:	e4 f3       	brlt	.-8      	; 0x7bc <__mulsf3_pse+0x84>
 7c4:	98 3e       	cpi	r25, 0xE8	; 232
 7c6:	d4 f3       	brlt	.-12     	; 0x7bc <__mulsf3_pse+0x84>
 7c8:	86 95       	lsr	r24
 7ca:	77 95       	ror	r23
 7cc:	67 95       	ror	r22
 7ce:	b7 95       	ror	r27
 7d0:	f7 95       	ror	r31
 7d2:	e7 95       	ror	r30
 7d4:	9f 5f       	subi	r25, 0xFF	; 255
 7d6:	c1 f7       	brne	.-16     	; 0x7c8 <__mulsf3_pse+0x90>
 7d8:	fe 2b       	or	r31, r30
 7da:	88 0f       	add	r24, r24
 7dc:	91 1d       	adc	r25, r1
 7de:	96 95       	lsr	r25
 7e0:	87 95       	ror	r24
 7e2:	97 f9       	bld	r25, 7
 7e4:	08 95       	ret

000007e6 <_exit>:
 7e6:	f8 94       	cli

000007e8 <__stop_program>:
 7e8:	ff cf       	rjmp	.-2      	; 0x7e8 <__stop_program>
